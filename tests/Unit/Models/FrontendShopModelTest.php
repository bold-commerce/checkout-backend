<?php

namespace Tests\Unit\Models;

use App\Exceptions\ShopNotFoundException;
use App\Models\Assets;
use App\Models\FrontendShop;
use App\Models\Shop;
use App\Models\ShopApiToken;
use App\Models\ShopAssets;
use App\Models\ShopUrl;
use App\Services\AssetsService;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Crypt;
use Tests\TestCase;

class FrontendShopModelTest extends TestCase
{
    protected Shop $shop;
    protected ShopApiToken $shopApiToken;
    protected ShopUrl $shopUrl;
    protected ShopAssets $shopAssets;
    protected Assets $assets;

    protected AssetsService $assetsService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        Config::set('services.bold_checkout.checkout_url', 'https://checkout.staging.boldapps.net');
        $this->assetsService = app()->make(AssetsService::class);
    }

    public function testGetTokenAsStringFunction() {
        $this->initializeShopsData(1, 1, 1, 1);

        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());

        $result = $frontendShop->getToken();
        $this->assertEquals(Crypt::decryptString($this->shopApiToken->getToken()), $result);
    }

    public function testGetTokenAsModelFunction() {
        $this->initializeShopsData(1, 1, 1, 1);

        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());

        $result = $frontendShop->getToken(false);
        $this->assertEquals(ShopApiToken::class, $result::class);
    }

    public function testGetAssetsFunction() {
        $asset = $this->assetsService->getAssetByID(1);
        $asset->setCompleteAssetUrl();
        $this->initializeShopsData(1, 1, 1, 1);
        $expected = collect([
            'template' => $asset,
            'children' => collect([
                'header' => collect([]),
                'body' => collect([]),
                'footer' => collect([]),
            ]),
        ]);
        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());

        $result = $frontendShop->getAssets();
        $this->assertEquals($expected->toArray(), $result->toArray());
    }

    public function testGetUrlsFunction() {
        $this->initializeShopsData(1, 1, 1 ,1);
        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());
        $expected = $this->shopUrl;
        $expected->shop_id = $this->shop->getID();

        $result = $frontendShop->getUrls();
        $this->assertEquals($expected->toArray(), $result->toArray());
    }

    public function testGetShopFunction() {
        $this->initializeShopsData(1, 1, 1 ,1);
        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());
        $expected = $this->shop;

        $result = $frontendShop->getShop();
        $this->assertEquals($expected->toArray(), $result->toArray());
    }

    public function testGetIdFunction() {
        $this->initializeShopsData(1, 1, 1 ,1);
        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());
        $expected = $this->shop->getID();

        $result = $frontendShop->getID();
        $this->assertEquals($expected, $result);
    }

    public function testSetReturnToCheckoutAfterLoginReturnsEmptyUrlWhenSetToEmptyFunction() {
        $frontendShop = new FrontendShop();
        $frontendShop->setReturnToCheckoutAfterLogin('');

        $result = $frontendShop->getReturnToCheckoutAfterLogin();
        $this->assertEquals('', $result);
    }

    public function testSetReturnToCheckoutAfterLoginReturnsExpectedUrlWhenSetCorrectlyFunction() {
        $fakeURL = fake()->url();
        $frontendShop = new FrontendShop();
        $frontendShop->setReturnToCheckoutAfterLogin($fakeURL);

        $result = $frontendShop->getReturnToCheckoutAfterLogin();
        $this->assertEquals($fakeURL, $result);
    }

    public function testSetShopFunction() {
        $this->initializeShopsData(1);
        $frontendShop = new FrontendShop();
        $frontendShop->setShop($this->shop);

        $result = $frontendShop->getShop();
        $this->assertEquals($this->shop, $result);
    }

    public function testSetShopApiTokenFunction() {
        $this->initializeShopsData(1, 1);
        $frontendShop = new FrontendShop();
        $frontendShop->setShopApiToken($this->shopApiToken);

        $result = $frontendShop->getToken(false);
        $this->assertEquals($this->shopApiToken, $result);
    }

    public function testSetShopUrlFunction() {
        $this->initializeShopsData(1, 1, 0, 1);
        $frontendShop = new FrontendShop();
        $frontendShop->setShopUrls($this->shopUrl);

        $result = $frontendShop->getUrls();
        $this->assertEquals($this->shopUrl, $result);
    }

    public function testToArrayFunction() {
        $asset = $this->assetsService->getAssetByID(1);
        $asset->setCompleteAssetUrl();

        $this->initializeShopsData(1, 1, 1, 1);
        $frontendShop = new FrontendShop();
        $frontendShop->populate($this->shop->getID());
        $expected = [
            'shop' => $this->shop->toArray(),
            'shopApiToken' => [
                'shop_id' => $this->shop->getID(),
                'api_token' =>
                    Crypt::decryptString($this->shopApiToken->getToken()),
            ],
            'shopUrl' => array_merge($this->shopUrl->toArray(), ['shop_id' => $this->shop->getID()]),
            'shopAssets' => [
                'template' => $asset->toArray(),
                'children' => [
                    'header' => [],
                    'body' => [],
                    'footer' => [],
                ]
            ],
        ];

        $result = $frontendShop->toArray();
        $this->assertEquals($expected, $result);
    }

    public function testGetStylesheetUrlReturnsPopulatedValueFunction() {
        $this->shop = Shop::factory()->make([
            'id' => 414,
            'platform_type' => 'shopify',
            'platform_domain' => 'ron-cashier.myshopify.com'
        ]);
        $frontendShop = new FrontendShop();
        $frontendShop->setShop($this->shop);

        $expected = 'https://checkout.staging.boldapps.net/shop/shopify/ron-cashier.myshopify.com/styles.css';
        $result = $frontendShop->getStylesheetUrl();
        $this->assertEquals($expected, $result);
    }

    public function testGetStylesheetUrlReturnsEmptyCustomCssFunction() {
        $this->shop = Shop::factory()->make([
            'id' => 430,
            'platform_type' => 'shopify',
            'platform_domain' => 'ron-brain.myshopify.com'
        ]);
        $frontendShop = new FrontendShop();
        $frontendShop->setShop($this->shop);

        $expected = '';
        $result = $frontendShop->getStylesheetUrl();
        $this->assertEquals($expected, $result);
    }

    public function testGetStylesheetUrlForNonExistingShopFunction() {
        $this->initializeShopsData(1);
        $frontendShop = new FrontendShop();
        $frontendShop->setShop($this->shop);

        $expected = '';
        $result = $frontendShop->getStylesheetUrl();
        $this->assertEquals($expected, $result);
    }

    public function testPopulateWithStringAsParameterFunction() {
        $asset = $this->assetsService->getAssetByID(1);
        $asset->setCompleteAssetUrl();

        $this->initializeShopsData(1, 1, 1, 1);
        $frontendShop = new FrontendShop();
        $expected = [
            'shop' => $this->shop->toArray(),
            'shopApiToken' => [
                'shop_id' => $this->shop->getID(),
                'api_token' =>
                    Crypt::decryptString($this->shopApiToken->getToken()),
            ],
            'shopUrl' => array_merge($this->shopUrl->toArray(), ['shop_id' => $this->shop->getID()]),
            'shopAssets' => [
                'template' => $asset->toArray(),
                'children' => [
                    'header' => [],
                    'body' => [],
                    'footer' => [],
                ]
            ],
        ];

        $frontendShop->populate($this->shop->getPlatformDomain());
        $this->assertEquals($expected, $frontendShop->toArray());
    }

    public function testPopulateWithShopModelAsParameterFunction() {
        $asset = $this->assetsService->getAssetByID(1);
        $asset->setCompleteAssetUrl();

        $this->initializeShopsData(1, 1, 1, 1);
        $frontendShop = new FrontendShop();
        $expected = [
            'shop' => $this->shop->toArray(),
            'shopApiToken' => [
                'shop_id' => $this->shop->getID(),
                'api_token' =>
                    Crypt::decryptString($this->shopApiToken->getToken()),
            ],
            'shopUrl' => array_merge($this->shopUrl->toArray(), ['shop_id' => $this->shop->getID()]),
            'shopAssets' => [
                'template' => $asset->toArray(),
                'children' => [
                    'header' => [],
                    'body' => [],
                    'footer' => [],
                ]
            ],
        ];

        $frontendShop->populate($this->shop);
        $this->assertEquals($expected, $frontendShop->toArray());
    }


    public function testPopulateReturnsErrorWhenShopIdNotFoundFunction() {
        $this->expectException(ShopNotFoundException::class);

        $frontendShop = new FrontendShop();
        $frontendShop->populate(fake()->randomNumber(8));
    }

    public function testPopulateReturnsErrorWhenShopDomainNotFoundFunction() {
        $this->expectException(ShopNotFoundException::class);

        $frontendShop = new FrontendShop();
        $frontendShop->populate(fake()->url());
    }

    public function testPopulateReturnsErrorWhenShopModelNotFoundFunction() {
        $this->expectException(ShopNotFoundException::class);

        $frontendShop = new FrontendShop();
        $frontendShop->populate(Shop::factory()->make());
    }

    public function testPopulateReturnsErrorWhenShopUrlsNotFoundFunction() {
        $this->initializeShopsData(1);

        $frontendShop = new FrontendShop();
        $this->expectException(ShopNotFoundException::class);
        $frontendShop->populate($this->shop->getID());
    }

    public function testPopulateReturnsErrorWhenShopApiTokenNotFoundFunction() {
        $this->initializeShopsData(1, 0, 0, 1);
        $this->shop = Shop::factory()->create();
        $this->shopUrl = ShopUrl::factory()->create(['shop_id' => $this->shop->getID()]);

        $frontendShop = new FrontendShop();
        $this->expectException(ShopNotFoundException::class);
        $frontendShop->populate($this->shop->getID());
    }

    public function testPopulateReturnsErrorWhenShopAssetsNotFoundFunction() {
        $this->initializeShopsData(1, 1, 0, 1);
        $this->shop = Shop::factory()->create();
        $this->shopUrl = ShopUrl::factory()->create(['shop_id' => $this->shop->getID()]);
        $this->shopApiToken = ShopApiToken::factory()->create(['shop_id' => $this->shop->getID()]);

        $frontendShop = new FrontendShop();
        $this->expectException(ShopNotFoundException::class);
        $frontendShop->populate($this->shop->getID());
    }

    /**
     * for each param:
     *   - if value = 1, create an object in DB
     *   - if value = 2, create an instance of object
     *   - if anything else, do nothing
     *
     * @param int $shop
     * @param int $apiToken
     * @param int $asset
     * @param int $urls
     * @return void
     */
    private function initializeShopsData(int $shop = 0, int $apiToken = 0, int $asset = 0, int $urls = 0): void {
        if ($shop === 1) {
            $this->shop = Shop::factory()->create(['id' => fake()->numberBetween(1, 100000)]);
        } elseif ($shop === 2) {
            $this->shop = Shop::factory()->make(['id' => fake()->numberBetween(1, 100000)]);
        }
        $shopID = $this->shop->getID() ?? null;

        if ($apiToken === 1) {
            $this->shopApiToken = ShopApiToken::factory()->create(['shop_id' => $shopID]);
        } elseif ($apiToken === 2) {
            $this->shopApiToken = ShopApiToken::factory()->make(['shop_id' => $shopID]);
        }

        if ($asset === 1) {
            $this->shopAssets = ShopAssets::factory()->create(['shop_id' => $shopID, 'asset_id' => 1]);
        } elseif ($asset === 2) {
            $this->shopAssets = ShopAssets::factory()->make(['shop_id' => $shopID, 'asset_id' => 1]);
        }

        if ($urls === 1) {
            $this->shopUrl = ShopUrl::factory()->create(['shop_id' => $shopID]);
        } elseif ($urls === 2) {
            $this->shopUrl = ShopUrl::factory()->make(['shop_id' => $shopID]);
        }
    }

    /**
     * for each param:
     *   - if true - delete object from DB
     *   - if false - do nothing
     *
     * @param bool $shop
     * @param bool $apiToken
     * @param bool $asset
     * @param bool $urls
     * @return void
     */
    private function deleteShopData(bool $shop = false, bool $apiToken = false, bool $asset = false, bool $urls = false): void {
        if ($apiToken) {
            $this->shopApiToken->where('shop_id', '=', $this->shop->getID())->delete();
        }

        if ($urls) {
            $this->shopUrl->where('shop_id', '=', $this->shop->getID())->delete();
        }

        if ($asset) {
            $this->shopAssets->where('shop_id', '=', $this->shop->getID())->delete();
        }

        if ($shop) {
            $this->shop->delete();
        }
    }
}
