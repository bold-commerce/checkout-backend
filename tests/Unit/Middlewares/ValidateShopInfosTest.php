<?php

namespace Tests\Unit\Middlewares;

use App\Http\Middleware\ValidateShopInfos;
use App\Models\Assets;
use App\Models\FrontendShop;
use App\Models\Shop;
use App\Models\ShopApiToken;
use App\Models\ShopAssets;
use App\Models\ShopUrl;
use App\Services\ShopApiTokenService;
use App\Services\ShopAssetsService;
use App\Services\ShopService;
use App\Services\ShopUrlService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Mockery as M;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Tests\TestCase;

class ValidateShopInfosTest extends TestCase
{
    protected ValidateShopInfos $validateShopInfosMiddleware;

    /** @var Request|M\Mock */
    protected $requestMock;

    /** @var Closure|M\Mock */
    protected $closureMock;

    protected Assets $assetsFactory;
    protected Shop $shopFactory;
    protected ShopApiToken $shopApiTokenFactory;
    protected ShopAssets $shopAssetsFactory;
    protected ShopUrl $shopUrlFactory;

    /** @var FrontendShop|M\Mock */
    protected $frontendShopMock;

    /** @var ShopService|M\Mock */
    protected ShopService|M\Mock $shopServiceMock;

    /** @var ShopAssetsService|M\Mock */
    protected ShopAssetsService|M\Mock $shopAssetsServiceMock;

    /** @var ShopApiTokenService|M\Mock */
    protected ShopApiTokenService|M\Mock $shopApiTokenServiceMock;

    /** @var ShopUrlService|M\Mock */
    protected ShopUrlService|M\Mock $shopUrlServiceMock;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->requestMock = M::mock(Request::class);
        $this->closureMock = function () {
            return 'good';
        };
        $this->shopServiceMock = M::mock(ShopService::class);
        $this->shopApiTokenServiceMock = M::mock(ShopApiTokenService::class);
        $this->shopAssetsServiceMock = M::mock(ShopAssetsService::class);
        $this->shopUrlServiceMock = M::mock(ShopUrlService::class);

        $this->validateShopInfosMiddleware = new ValidateShopInfos();

        $this->assetFactory = Assets::factory()->create();
    }

    public function testNoShopInDB()
    {
        $this->expectException(HttpException::class);
        $this->requestMock->shouldReceive('route->parameter')->with('shopDomain')->andReturn(fake()->url());
        $this->validateShopInfosMiddleware->handle($this->requestMock, $this->closureMock);
    }

    public function testNoShopUrlsInDB()
    {
        $this->shopFactory = Shop::factory()->create();
        $this->expectException(HttpException::class);
        $this->requestMock->shouldReceive('route->parameter')->with('shopDomain')->andReturn($this->shopFactory->getID());
        $this->validateShopInfosMiddleware->handle($this->requestMock, $this->closureMock);
    }

    public function testNoShopApiTokenInDB()
    {
        $this->shopFactory = Shop::factory()->create();
        $this->shopUrlFactory = ShopUrl::factory()->create(['shop_id' => $this->shopFactory->id]);
        $this->expectException(HttpException::class);
        $this->requestMock->shouldReceive('route->parameter')->with('shopDomain')->andReturn($this->shopFactory->getID());
        $this->validateShopInfosMiddleware->handle($this->requestMock, $this->closureMock);
    }

    public function testNoShopAssetsInDB()
    {
        $this->shopFactory = Shop::factory()->create();
        $this->shopApiTokenFactory = ShopApiToken::factory()->create(['shop_id' => $this->shopFactory->id]);
        $this->shopUrlFactory = ShopUrl::factory()->create(['shop_id' => $this->shopFactory->id]);
        $this->expectException(HttpException::class);
        $this->requestMock->shouldReceive('route->parameter')->with('shopDomain')->andReturn($this->shopFactory->getID());
        $this->validateShopInfosMiddleware->handle($this->requestMock, $this->closureMock);
    }

    public function testShopCorrectlyInstantiated()
    {
        $this->shopFactory = Shop::factory()->create();
        $this->shopApiTokenFactory = ShopApiToken::factory()->create(['shop_id' => $this->shopFactory->id]);
        $this->shopAssetsFactory = ShopAssets::factory()->create(['shop_id' => $this->shopFactory->id, 'asset_id' => $this->assetFactory->id]);
        $this->shopUrlFactory = ShopUrl::factory()->create(['shop_id' => $this->shopFactory->id]);
        $this->requestMock->shouldReceive('route->parameter')->with('shopDomain')->andReturn($this->shopFactory->getID());
        App::shouldReceive('instance')->with(FrontendShop::class, $this->frontendShopMock);
        $result = $this->validateShopInfosMiddleware->handle($this->requestMock, $this->closureMock);
        $this->assertEquals('good', $result);
    }
}
